// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2020 16:33:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Elevador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Elevador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] botoes;
reg cartao_acesso;
reg clear;
reg clock;
reg fechar;
reg segurar;
reg sensor;
// wires                                               
wire [3:0] andarprovisorio;
wire [6:0] display_dez;
wire [6:0] display_uni;
wire [15:0] ledbotao;

// assign statements (if any)                          
Elevador i1 (
// port map - connection between master ports and signals/registers   
	.andarprovisorio(andarprovisorio),
	.botoes(botoes),
	.cartao_acesso(cartao_acesso),
	.clear(clear),
	.clock(clock),
	.display_dez(display_dez),
	.display_uni(display_uni),
	.fechar(fechar),
	.ledbotao(ledbotao),
	.segurar(segurar),
	.sensor(sensor)
);
initial 
begin 
#2000000 $finish;
end 

// clear
initial
begin
	clear = 1'b0;
	clear = #10000 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// botoes[ 15 ]
initial
begin
	botoes[15] = 1'b0;
	botoes[15] = #60000 1'b1;
	botoes[15] = #20000 1'b0;
	botoes[15] = #370000 1'b1;
	botoes[15] = #10000 1'b0;
	botoes[15] = #530000 1'b1;
	botoes[15] = #10000 1'b0;
end 
// botoes[ 14 ]
initial
begin
	botoes[14] = 1'b0;
	botoes[14] = #1500000 1'b1;
	botoes[14] = #10000 1'b0;
end 
// botoes[ 13 ]
initial
begin
	botoes[13] = 1'b0;
end 
// botoes[ 12 ]
initial
begin
	botoes[12] = 1'b0;
end 
// botoes[ 11 ]
initial
begin
	botoes[11] = 1'b0;
end 
// botoes[ 10 ]
initial
begin
	botoes[10] = 1'b0;
end 
// botoes[ 9 ]
initial
begin
	botoes[9] = 1'b0;
end 
// botoes[ 8 ]
initial
begin
	botoes[8] = 1'b0;
end 
// botoes[ 7 ]
initial
begin
	botoes[7] = 1'b0;
	botoes[7] = #450000 1'b1;
	botoes[7] = #10000 1'b0;
end 
// botoes[ 6 ]
initial
begin
	botoes[6] = 1'b0;
	botoes[6] = #770000 1'b1;
	botoes[6] = #10000 1'b0;
end 
// botoes[ 5 ]
initial
begin
	botoes[5] = 1'b0;
end 
// botoes[ 4 ]
initial
begin
	botoes[4] = 1'b0;
	botoes[4] = #120000 1'b1;
	botoes[4] = #20000 1'b0;
	botoes[4] = #1410000 1'b1;
	botoes[4] = #10000 1'b0;
end 
// botoes[ 3 ]
initial
begin
	botoes[3] = 1'b0;
	botoes[3] = #280000 1'b1;
	botoes[3] = #20000 1'b0;
end 
// botoes[ 2 ]
initial
begin
	botoes[2] = 1'b0;
end 
// botoes[ 1 ]
initial
begin
	botoes[1] = 1'b0;
end 
// botoes[ 0 ]
initial
begin
	botoes[0] = 1'b0;
	botoes[0] = #440000 1'b1;
	botoes[0] = #10000 1'b0;
end 

// segurar
initial
begin
	segurar = 1'b0;
	segurar = #260000 1'b1;
	segurar = #20000 1'b0;
end 

// sensor
initial
begin
	sensor = 1'b0;
end 

// cartao_acesso
initial
begin
	cartao_acesso = 1'b0;
	cartao_acesso = #160000 1'b1;
	cartao_acesso = #1330000 1'b0;
	cartao_acesso = #160000 1'b1;
end 

// fechar
initial
begin
	fechar = 1'b0;
	fechar = #760000 1'b1;
	fechar = #10000 1'b0;
end 
endmodule

